# -*- coding: utf-8 -*-
"""exam06_pandas01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ilSQc8QnVczqe5htQq8J4mYyXex66b5h

#Pandas 실습

##DataFrame
"""

import pandas as pd

df = pd.DataFrame([[15, '남', '영훈중'],
                   [17, '여', '성암중']],
                  index=['서준', '동연'],
                  columns=['나이', '성별', '학교'])
df

df.index

df.columns

df = df.rename(index={'서준':'학생1', '동연':'학생2'})
df

df = df.rename(columns={'나이':'연령'})
df

df1 = df['연령'] #column indexing
print(df1)

print(type(df1))

df2 = df[['연령']]
print(type(df2))
print(df2)

df3 = df.iloc[0]
df3

print(type(df3))

df4 = df.loc['학생1']
df4

df.iloc[0, 0:2]

df.loc['학생1', '연령':'성별']

df.loc['학생3']=[18, '남', '신일중'] #index 추가
df.loc['학생4']=[14, '여', '풍문중']
df

df1=df.drop(['학생3'], inplace=False) #inplace=False: 원본을 유지하고 사본을 만들어 보여줌. False가 default값.
df1

df #원본 유지

df1=df.drop(['학생3'], inplace=False, axis='rows')
print(df1)

df['학년']=3 #column 추가
df

df['키']=[175, 180, 185, 190] #column을 추가할때 각각 값을 줄 경우 갯수를 맞춰야함.
df

df.drop(['학년'], axis='columns', inplace=False)
df1

df

df1=df[['연령', '성별', '학교', '키']]
df1

exam_data={'이름':['경석', '연주', '선희'],
           '수학':[90, 85, 70],
           '영어':[98, 88, 78],
           '음악':[90, 89, 88],
           '체육':[88, 78, 69]}
df=pd.DataFrame(exam_data)
df.set_index('이름', inplace=True)
df

df.shape

df.iloc[0, 3]= 90
df

df.loc['경석', '체육']=100
df

df.loc['경석', ['영어', '체육']]=120, 130
df

df.loc['경석', ['영어', '체육']]=(120, 130)
df

df.loc['경석', ['영어', '체육']]=120
df

df.transpose() #transpose(): index와 column을 바꿈
df

df.loc['선희', '음악']=89
df

ndf1=df.set_index('음악')
ndf1

ndf1.loc[89]

ndf2=df.set_index(['음악', '수학'])
ndf2

ndf2.loc[(89, 70)]

ndf2.iloc[1]

ndf3=df.set_index(['음악'])
ndf3

ndf3=df.reset_index().set_index(['음악']) #reset_index():기존의 index를 자료로 쓸 필요가 있을경우 사용. drop true를 추가할 경우 비어있는걸 채워서 새로운 index를 만들어줌.
ndf3

df

ndf=df.reindex(list(df.index)+['덕유', '영림'], fill_value=0) #reindex(): 새로운 index 삽입 #nan으로 채워짐. 0으로 넣을경우 fill_value 사용.
ndf

ndf=df.sort_index() #정렬
ndf

ndf=df.sort_index(ascending=False) #ascending은 True가 default. 오름차순. 내림차순일 경우 False.
ndf

ndf=df.sort_values(by='영어', ascending=False) #영어 점수를 기준으로 내림차순
ndf

#column을 기준으로 sort하고 싶을 때.(column은 sort함수가 따로 없음)
list(df.columns)

columns=list(df.columns)
columns.sort()

ndf=df[columns] #sort된 index를 column indexing
ndf

sr=pd.Series([1,2,3,3,5], index=['a','b', 'c', 'd', 'e']) #index만 있음
sr

sr[1] #바로 접근 가능

student1=pd.Series({'국어':20, '영어':90})
student1

#list 연산
a=[1,2,3]
b=[4,5,6]
c=a+b
print(c)
d=a*5
print(d)
#e=a-b #error
#e=a/b #errorm

import numpy as np

a=np.array([1,2,3])
b=np.array([4,5,6])
print(a) #array는 행렬이라 ,없음
print(type(a))
c=a+b #행렬연산
c=a/b #
print(c)

percentage=student1/100
percentage

student2=pd.Series({'영어':40, '국어':80})
student2

student1+student2 #순서와 상관없이 index를 기준으로 동일한 요소끼리 더해줌. 같은 index가 없는 경우 NaN으로 계산. np.array는 자리 기준으로 더해줌.

student2=pd.Series({'영어':40, '국어':80, '수학':80})
student2

student1+student2 #student1의 수학 값이 없으므로  NaN.

sr1=student1.add(student2, fill_value=0) #비어있는 결측치를 0으로 채우고 계산
sr1

df

ndf=df+100 #모든 요소에 100이 더해짐
ndf

ndf2=ndf-df #dataframe도 같은 index, column을 찾아 계산
ndf2

df

df.to_csv('./df_sample.csv') #.csv file save #모든 자료를 ,로 구분해서 txt파일로 만듬.

df1=pd.read_csv('./df_sample.csv') #.csv file read #index가 column으로 올라감.
df1

df1=pd.read_csv('./df_sample.csv', index_col='이름') #file read
df1

df1=pd.read_csv('./df_sample.csv')
df1

df1.to_csv('./df_sample2.csv')

df2=pd.read_csv('./df_sample2.csv', index_col=0) #index_col=0 <- Unnamed: 0일 경우
df2

#df2=df2.set_index('Unnamed: 0')
#df2

df

df.to_json('./df_sample.json', force_ascii=False)
#json file은 메모리 용량을 많이 차지하지만 웹에서 많이 사용함.

ndf1=pd.read_json('./df_sample.json')
ndf1

df.to_excel('./df_sample.xlsx')

df2=pd.read_excel('./df_sample.xlsx', index_col=0)
df2

tables=pd.read_html('https://www.w3schools.com/html/html_tables.asp')
print(tables)
print(type(tables))
print(len(tables))
print(tables[0])
#list 안 요소를 찍으면 됨.

tables[1]