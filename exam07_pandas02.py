# -*- coding: utf-8 -*-
"""exam07_pandas02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V10gdGJKSZ2V-1CxnwaIz43u0mi1xGHf
"""

import pandas as pd

pd.set_option('display.max_columns', 15)
pd.set_option('display.max_row', 399) #자료 개수보다 크면 다 보여주고 작으면 앞에 5개 뒤에 5개만 보여줌.

df=pd.read_csv('./datasets/auto-mpg.csv',
               names=['mpg', 'cylinders', 'displacement', 'horsepower',
                      'weight', 'acceleration', 'model year', 'origin', 'name'])
df

"""가변수화 get_dummies():
상관계수 corr():
"""

df.head(10)

df.tail()

df.shape #자료 398개, 항목 9개

df.info()

df.dtypes

df['mpg'].dtypes

df.mpg.dtypes

df.describe()

df.describe().T

df.describe(include='all')

df.count()

unique_value=df['name'].value_counts()
print(type(unique_value))
unique_value

df['model year'].value_counts()

print(df.mean())

print(df.mpg.mean())

df.std()

df.corr()

mpg_to_kpl=0.425144
df['kpl']=df['mpg']*mpg_to_kpl
df.head(50)

df['kpl']=df['kpl'].round(2)
df

df['horsepower'].unique()

import numpy as np

df['horsepower'].replace('?', np.nan, inplace=True)
df.dropna(subset=['horsepower'], axis=0, inplace=True)
df['horsepower']=df['horsepower'].astype('float64')
df.info()

df.corr()

df

df['origin'].unique()

df['origin'].replace({1:'USA', 2:'EU', 3:'JP'}, inplace=True)
print(df['origin'].unique())
print(df['origin'].head())
print(df['origin'].value_counts())

df['origin']=df['origin'].astype('category') #명목척도
print(df['origin'].dtypes)
print(['origin'])

"""척도


*   질적: 명목, 순위/서열

 -명목척도(nominal scale): '이름'만 나타내는 척도. 숫자로 표현할 수도 있지만숫자는 분류의 기능만 할 뿐 양적인 의미는 없고 특정 카테고리만 표현합니다.

 -서열척도(ordinal scale): 순위(서열)가 있는 척도로 수량화할 수 있는 자료입니다. 숫자는 서열을 나타내지만 '어느 정도' 크고 작다는 표현할 수 없습니다.
*   양적: 구간, 비율

 -구간(등간)척도(interval scale): 연속적인 수로 수량화할 수 있으며 절대적인 원점이 존재하지 않는다. 위와 다르게 어느 정도 크고 작다를 표현할 수 있습니다. 숫자 간의 간격이 동일합니다.'0'이라는 값이 값이 없다고 할 수 없습니다.

 -비율 척도 (ratio scale): 연속적인 수로 수량화할 수 있으며 절대적인 원점이 존재한다. 이것은 ‘0’ 값이 의미 있는 값을 나타내며, 이 값은 해당 수량의 완전한 부재를 나타낸다.


"""

df['origin']=df['origin'].astype('str')
print(df['origin'].dtypes)
print(['origin'])

count, bin_dividers=np.histogram(df['horsepower'], bins=3)
print(count)
print(bin_dividers)

bin_names=['저출력', '보통출력', '고출력']
df['hp_bin']=pd.cut(x=df['horsepower'], bins=bin_dividers, #cut을 이용해 category data를 만듬.
                    labels=bin_names, include_lowest=True)
df[['horsepower', 'hp_bin']].head(30)

df.info()

df1=df[['horsepower', 'hp_bin', 'origin']]
df1

df2=pd.get_dummies(df1)

df2

df=pd.DataFrame({'c1':['a','a','b','a','b'],
                 'c2':[1,1,1,2,2],
                 'c3':[1,1,2,2,2]})
df

df_dup=df.duplicated() #duplicated(): 중복이면 True
df_dup

df_dup=df['c2'].duplicated() #c2 column을 기준으로 중복확인
df_dup

df2=df.drop_duplicates()
df2

df2.info()

df2.iloc[1]

df2.loc[2]

df2=df2.reset_index(drop=True)
df2

df2.reset_index(drop=True, inplace=True) #df2=df2.reset_index(drop=True) 동일
df2